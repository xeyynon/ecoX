import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import 'theme/app_theme.dart';
import 'routes/app_routes.dart';
import 'pages/login/login_page.dart';
import 'pages/dashboard/dashboard_page.dart';
import 'pages/live_data/live_data_page.dart';
import 'pages/alert/alerts_page.dart';
import 'pages/analytics/analytics_page.dart';
import 'pages/setting/setting_page.dart';
import 'firebase_options.dart'; // generated by FlutterFire CLI

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'EcoX',
      theme: AppTheme.lightTheme, // ‚úÖ use your app theme
      initialRoute: AppRoutes.dashboard, // start with login
      routes: {
        AppRoutes.login: (context) => const LoginPage(),
        AppRoutes.dashboard: (context) => const DashboardPage(),
        AppRoutes.liveData: (context) => const LiveDataPage(),
        AppRoutes.analytics: (context) => const AnalyticsPage(),
        AppRoutes.alerts: (context) => const AlertsPage(),
        AppRoutes.settings: (context) => const Placeholder(),
      },
    );
  }
}

// üîπ Optional: Keep this for debugging Firebase
class FirebaseCheckPage extends StatelessWidget {
  const FirebaseCheckPage({super.key});

  Future<String> testFirebase() async {
    try {
      final snapshot = await FirebaseFirestore.instance.collection('test').get();
      return "‚úÖ Firebase connected! Docs found: ${snapshot.docs.length}";
    } catch (e) {
      return "‚ùå Firebase error: $e";
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Firebase Test")),
      body: Center(
        child: FutureBuilder<String>(
          future: testFirebase(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const CircularProgressIndicator();
            } else if (snapshot.hasError) {
              return Text("Error: ${snapshot.error}");
            } else {
              return Text(snapshot.data ?? "No result");
            }
          },
        ),
      ),
    );
  }
}
